import React, { useState, useEffect } from 'react';
import '../styles/SystemPages.css';

interface DatabaseInfo {
  path: string;
  size: number;
  tableCount: number;
  tables: Array<{
    name: string;
    rowCount: number;
    columns: string[];
  }>;
  lastSync: {
    lastSyncTime: string;
    usersCount: number;
    devicesCount: number;
    success: boolean;
    error?: string;
  };
}

interface TableSchema {
  name: string;
  description: string;
  primaryKey: string;
  autoGenerated: string[];
  dataTypes: string;
}

const DatabasePage: React.FC = () => {
  const [databaseInfo, setDatabaseInfo] = useState<DatabaseInfo | null>(null);
  const [selectedTable, setSelectedTable] = useState<string | null>(null);
  const [tableSchema, setTableSchema] = useState<TableSchema | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [clearingDatabase, setClearingDatabase] = useState(false);

  useEffect(() => {
    loadDatabaseInfo();
    const interval = setInterval(loadDatabaseInfo, 30000); // Alle 30 Sekunden aktualisieren
    return () => clearInterval(interval);
  }, []);

  const loadDatabaseInfo = async () => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem('authToken');
      const response = await fetch('http://localhost:5000/api/admin-portal/database/info', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (result.success && result.data) {
        setDatabaseInfo(result.data);
      } else {
        setError(result.message || 'Fehler beim Laden der Datenbank-Informationen');
      }

    } catch (err) {
      setError('Verbindungsfehler zum Backend');
      console.error('Database-Info-Fehler:', err);
    } finally {
      setLoading(false);
    }
  };

  const loadTableSchema = async (tableName: string) => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(`http://localhost:5000/api/admin-portal/database/schema/${tableName}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (result.success && result.data) {
        setTableSchema(result.data);
        setSelectedTable(tableName);
      } else {
        alert(`Fehler beim Laden des Schemas: ${result.message}`);
      }

    } catch (err) {
      alert('Verbindungsfehler beim Laden des Schemas');
      console.error('Schema-Fehler:', err);
    }
  };

  const handleClearDatabase = async () => {
    if (!window.confirm('⚠️ WARNUNG: Alle Datenbank-Daten werden permanent gelöscht! Möchten Sie fortfahren?')) {
      return;
    }

    try {
      setClearingDatabase(true);

      const token = localStorage.getItem('authToken');
      const response = await fetch('http://localhost:5000/api/admin-portal/database/clear', {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (result.success) {
        alert('✅ Datenbank erfolgreich geleert');
        loadDatabaseInfo();
      } else {
        alert(`❌ Fehler beim Leeren der Datenbank: ${result.message}`);
      }

    } catch (err) {
      alert('❌ Verbindungsfehler beim Leeren der Datenbank');
      console.error('Clear-Database-Fehler:', err);
    } finally {
      setClearingDatabase(false);
    }
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatPath = (fullPath: string): string => {
    // Kürze den Pfad für bessere Darstellung
    const parts = fullPath.split('\\');
    if (parts.length > 4) {
      return `...\\${parts.slice(-3).join('\\')}`;
    }
    return fullPath;
  };

  if (loading) {
    return (
      <div className="admin-portal-page">
        <div className="page-header">
          <div className="page-title">
            <h1>🗄️ Datenbank-Verwaltung</h1>
            <p>SQLite Schema-Detection und Daten-Persistence</p>
          </div>
        </div>
        <div className="loading-state">
          <div className="loading-spinner"></div>
          <p>Lade Datenbank-Informationen...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="admin-portal-page">
        <div className="page-header">
          <div className="page-title">
            <h1>🗄️ Datenbank-Verwaltung</h1>
            <p>SQLite Schema-Detection und Daten-Persistence</p>
          </div>
        </div>
        <div className="error-state">
          <p>{error}</p>
          <button className="btn btn-primary" onClick={loadDatabaseInfo}>
            Erneut versuchen
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-portal-page">
      <div className="page-header">
        <div className="page-title">
          <h1>🗄️ Datenbank-Verwaltung</h1>
          <p>SQLite Schema-Detection und Daten-Persistence</p>
        </div>
        <div className="page-actions">
          <button 
            className="btn btn-secondary"
            onClick={loadDatabaseInfo}
          >
            🔄 Aktualisieren
          </button>
          {process.env.NODE_ENV !== 'production' && (
            <button 
              className="btn btn-outline"
              onClick={handleClearDatabase}
              disabled={clearingDatabase}
              style={{ color: '#dc2626', borderColor: '#dc2626' }}
            >
              {clearingDatabase ? '🧹 Lösche...' : '🧹 DB leeren'}
            </button>
          )}
        </div>
      </div>

      {/* Datenbank-Übersicht */}
      {databaseInfo && (
        <>
          <div className="content-section">
            <h2>📊 Datenbank-Übersicht</h2>
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-icon">📂</div>
                <div className="stat-content">
                  <div className="stat-number">{formatPath(databaseInfo.path)}</div>
                  <div className="stat-label">Datenbank-Pfad</div>
                  <div className="stat-description">SQLite File-System Storage</div>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">💾</div>
                <div className="stat-content">
                  <div className="stat-number">{formatFileSize(databaseInfo.size)}</div>
                  <div className="stat-label">Dateigröße</div>
                  <div className="stat-description">Persistent gespeichert</div>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">🗂️</div>
                <div className="stat-content">
                  <div className="stat-number">{databaseInfo.tableCount}</div>
                  <div className="stat-label">Tabellen</div>
                  <div className="stat-description">Dynamisch generiert</div>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">👥</div>
                <div className="stat-content">
                  <div className="stat-number">{databaseInfo.lastSync.usersCount}</div>
                  <div className="stat-label">Entra ID Users</div>
                  <div className="stat-description">Letzter Sync: {databaseInfo.lastSync.lastSyncTime ? new Date(databaseInfo.lastSync.lastSyncTime).toLocaleString('de-DE') : 'Nie'}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Tabellen-Details */}
          <div className="content-section">
            <h2>🗃️ Tabellen-Struktur</h2>
            <div className="sources-grid">
              {databaseInfo.tables.map((table) => (
                <div key={table.name} className="source-card">
                  <div className="source-header">
                    <div className="source-info">
                      <span className="source-icon">
                        {table.name === 'users' && '👥'}
                        {table.name === 'devices' && '💻'}
                        {table.name === 'sync_status' && '📊'}
                        {!['users', 'devices', 'sync_status'].includes(table.name) && '🗂️'}
                      </span>
                      <div>
                        <h3>{table.name}</h3>
                        <p className="source-status">{table.rowCount} Datensätze</p>
                      </div>
                    </div>
                    <div className="source-actions">
                      <button
                        className="btn btn-small btn-outline"
                        onClick={() => loadTableSchema(table.name)}
                      >
                        📋 Schema anzeigen
                      </button>
                    </div>
                  </div>

                  <div className="source-stats">
                    <div className="source-stat">
                      <div className="stat-value">{table.columns.length}</div>
                      <div className="stat-label">Spalten</div>
                    </div>
                    <div className="source-stat">
                      <div className="stat-value">{table.rowCount}</div>
                      <div className="stat-label">Zeilen</div>
                    </div>
                  </div>

                  {table.columns.length > 0 && (
                    <div className="table-columns">
                      <strong>Spalten:</strong>
                      <div className="columns-list">
                        {table.columns.slice(0, 6).map((column, index) => (
                          <span key={index} className="column-tag">
                            {column}
                          </span>
                        ))}
                        {table.columns.length > 6 && (
                          <span className="column-tag more">+{table.columns.length - 6} weitere</span>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* Schema-Details Modal */}
          {selectedTable && tableSchema && (
            <div className="modal-overlay">
              <div className="modal-content">
                <div className="modal-header">
                  <h3>📋 Schema: {tableSchema.name}</h3>
                  <button 
                    className="modal-close"
                    onClick={() => {
                      setSelectedTable(null);
                      setTableSchema(null);
                    }}
                  >
                    ✕
                  </button>
                </div>
                <div className="modal-body">
                  <div className="schema-info">
                    <div className="detail-row">
                      <span className="detail-label">Beschreibung:</span>
                      <span className="detail-value">{tableSchema.description}</span>
                    </div>
                    <div className="detail-row">
                      <span className="detail-label">Primary Key:</span>
                      <span className="detail-value">{tableSchema.primaryKey}</span>
                    </div>
                    <div className="detail-row">
                      <span className="detail-label">Auto-generierte Felder:</span>
                      <span className="detail-value">{tableSchema.autoGenerated.join(', ')}</span>
                    </div>
                    <div className="detail-row">
                      <span className="detail-label">Datentyp-Erkennung:</span>
                      <span className="detail-value">{tableSchema.dataTypes}</span>
                    </div>
                  </div>

                  {databaseInfo.tables.find(t => t.name === selectedTable) && (
                    <div className="table-details">
                      <h4>Spalten-Übersicht</h4>
                      <div className="columns-grid">
                        {databaseInfo.tables.find(t => t.name === selectedTable)!.columns.map((column, index) => (
                          <div key={index} className="column-item">
                            <div className="column-name">{column}</div>
                            <div className="column-type">
                              {column === 'id' ? 'PRIMARY KEY' : 
                               column.includes('enabled') || column.includes('Enabled') ? 'BOOLEAN' :
                               column.includes('Time') || column.includes('DateTime') ? 'DATETIME' :
                               column.includes('Count') ? 'INTEGER' : 'TEXT'}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Sync-Status Sektion */}
          <div className="content-section">
            <h2>🔄 Letzter Sync-Status</h2>
            <div className="sources-grid">
              <div className="source-card">
                <div className="source-header">
                  <div className="source-info">
                    <span className="source-icon">
                      {databaseInfo.lastSync.success ? '✅' : '❌'}
                    </span>
                    <div>
                      <h3>Sync-Status</h3>
                      <p className={`source-status ${databaseInfo.lastSync.success ? 'text-green-600' : 'text-red-600'}`}>
                        {databaseInfo.lastSync.success ? 'Erfolgreich' : 'Fehlgeschlagen'}
                      </p>
                    </div>
                  </div>
                </div>

                <div className="source-stats">
                  <div className="source-stat">
                    <div className="stat-value">{databaseInfo.lastSync.usersCount}</div>
                    <div className="stat-label">Users</div>
                  </div>
                  <div className="source-stat">
                    <div className="stat-value">{databaseInfo.lastSync.devicesCount}</div>
                    <div className="stat-label">Devices</div>
                  </div>
                </div>

                {databaseInfo.lastSync.lastSyncTime && (
                  <div className="sync-time-info">
                    <strong>Letzter Sync:</strong>
                    <br />
                    {new Date(databaseInfo.lastSync.lastSyncTime).toLocaleString('de-DE')}
                  </div>
                )}

                {databaseInfo.lastSync.error && (
                  <div className="source-warning">
                    <span>⚠️ Fehler: {databaseInfo.lastSync.error}</span>
                  </div>
                )}
              </div>

              {/* Live-Schema-Erkennung Info */}
              <div className="source-card">
                <div className="source-header">
                  <div className="source-info">
                    <span className="source-icon">🔍</span>
                    <div>
                      <h3>Schema-Detection</h3>
                      <p className="source-status">Automatische Datentyp-Erkennung</p>
                    </div>
                  </div>
                </div>

                <div className="schema-features">
                  <div className="feature-item">
                    <span className="feature-icon">✅</span>
                    <span>Automatische Tabellen-Erstellung</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">🔍</span>
                    <span>Dynamische Datentyp-Analyse</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">📊</span>
                    <span>JSON-Serialisierung für komplexe Datentypen</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">💾</span>
                    <span>Persistente Speicherung</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Erweiterte Aktionen */}
          <div className="content-section">
            <h2>⚙️ Datenbank-Aktionen</h2>
            <div className="action-buttons">
              <button 
                className="btn btn-secondary"
                onClick={() => window.location.href = '/admin-portal/users/sync'}
              >
                🔄 Sync-Management
              </button>
              <button 
                className="btn btn-secondary"
                onClick={() => window.location.href = '/admin-portal/users/overview'}
              >
                👥 User-Übersicht
              </button>
              <button 
                className="btn btn-secondary"
                onClick={() => window.location.href = '/admin-portal/system/stats'}
              >
                📈 Erweiterte Statistiken
              </button>
              {process.env.NODE_ENV !== 'production' && (
                <button 
                  className="btn btn-outline"
                  onClick={handleClearDatabase}
                  disabled={clearingDatabase}
                  style={{ color: '#dc2626', borderColor: '#dc2626' }}
                >
                  {clearingDatabase ? '🧹 Lösche...' : '🧹 Datenbank leeren'}
                </button>
              )}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default DatabasePage;
